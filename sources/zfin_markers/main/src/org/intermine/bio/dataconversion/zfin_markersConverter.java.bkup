package org.intermine.bio.dataconversion;

/*
 * Copyright (C) 2002-2009 FlyMine
 *
 * This code may be freely distributed and modified under the
 * terms of the GNU Lesser General Public Licence.  This should
 * be distributed with the code.  See the LICENSE file for more
 * information or http://www.gnu.org/copyleft/lesser.html.
 *
 */

import java.io.File;
import java.io.FileReader;
import java.io.Reader;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.io.IOException;
import java.util.ArrayList;


import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.intermine.dataconversion.ItemWriter;
import org.intermine.metadata.Model;
import org.intermine.dataconversion.FileConverter;
import org.intermine.objectstore.ObjectStoreException;
import org.intermine.util.FormattedTextParser;
import org.intermine.xml.full.Item;
import org.xml.sax.SAXException;

/**
 * DataConverter to load ZFIN marker identifiers from text files
*/
public class zfin_markersConverter extends BioFileConverter{

    private static final Logger LOG = Logger.getLogger(zfin_markersConverter.class);
    protected String organismRefId;
    private Map<String, Item> markers = new HashMap();
    private Map<String, Item> mrels = new HashMap();    
    private Set<String> synonyms = new HashSet();
    
    /**
     * Constructor
     * @param writer the ItemWriter used to handle the resultant items
     * @param model the Model
     * @throws ObjectStoreException if an error occurs in storing
     */
    public zfin_markersConverter(ItemWriter writer, Model model)
        throws ObjectStoreException {
        super(writer, model, "ZFIN", "ZFIN data set");
	
        // create and store organism
        Item organism = createItem("Organism");
        organism.setAttribute("taxonId", "7955");
        store(organism);
        organismRefId = organism.getIdentifier();
    }  

    public void process(Reader reader) throws Exception {

	try {
            File markersFile = new File("/Users/sierramoxon/zebrafish/zfin_markers/1markers.txt");
            processMarkers(new FileReader(markersFile));
        } catch (IOException err) {
            throw new RuntimeException("error reading markersFile", err);
        }
        processMrels(reader);
    }

    public void processMrels(Reader reader) throws Exception {

        Iterator lineIter = FormattedTextParser.parseCsvDelimitedReader(reader);

        while (lineIter.hasNext()) {
            String[] line = (String[]) lineIter.next();

	    //System.out.println(line.length + line[0]);
	    if (line.length < 3){
		throw new RuntimeException("Line does not have enough elements: "+ line.length + line[0]);
	    }     
	    String primaryIdentifier = line[0];
            String mrel1 = line[2];
            String mrel2 = line[3];
            String mrelType = line[1];


            if (markers.get(mrel1) == null || markers.get(mrel2) == null) { 
		System.out.println (mrel1 + " " + mrel2);
                throw new RuntimeException("bad markers for relationship" + primaryIdentifier);
            }


            if (!StringUtils.isEmpty(primaryIdentifier)){
                Item mrel = getMarkerRelationship(primaryIdentifier);
                if (!StringUtils.isEmpty(mrel1)) {
                    mrel.setReference("marker1", getMarker(mrel1));
                }
                if (!StringUtils.isEmpty(mrel2)) {
                    mrel.setReference("marker2", getMarker(mrel2));
                }
                if (!StringUtils.isEmpty(mrelType)) {
                    mrel.setAttribute("type", mrelType);
                }
                try {
                    store(mrel);
                } catch (ObjectStoreException e) {
                    throw new SAXException(e);
                }

	    }
	    
	}
    }


    public void processMarkers(Reader reader) throws Exception {
	
	Iterator lineIter = FormattedTextParser.parseCsvDelimitedReader(reader);
	
	while (lineIter.hasNext()) {
	    String[] line = (String[]) lineIter.next();
	    //System.out.println(line[0]);
	    
            System.out.println(line.length + line[0]);
            if (line.length < 3){
                throw new RuntimeException("Line does not have enough elements: "+ line.length + line[0]);
            }

	    String primaryIdentifier = line[0];
	    //String name = line[1];
	    String abbrev = line[1];
	    String type = line[2];
	    
	    if (!StringUtils.isEmpty(primaryIdentifier)){
		Item marker = getMarker(primaryIdentifier);
		//if (!StringUtils.isEmpty(name)) {
		//  marker.setAttribute("name", name);
		//   }
		if (!StringUtils.isEmpty(abbrev)) {
		    marker.setAttribute("abbrev", abbrev);
		}
		if (!StringUtils.isEmpty(type)) {                                                                     
		    marker.setAttribute("type", type);  
		}                                                                                                      
		try {
		    store(marker);
		    if (marker.getIdentifier()=="3_92922"){
			System.out.println("true");
		    }
		} catch (ObjectStoreException e) {
		    throw new SAXException(e);
		}
	    }
	}
	System.out.println("size of markers" +":" +markers.size());
    }

    private Item getMarker(String primaryIdentifier)
	throws SAXException {
	Item item = markers.get(primaryIdentifier);
	if (primaryIdentifier=="ZDB-GENE-030616-266"){
	    System.out.println("I found: " + primaryIdentifier);
	}
	if (primaryIdentifier=="ZDB-BAC-070608-251"){
            System.out.println("I found: " + primaryIdentifier);
	}
	if (item == null) {
	    item = createItem("Marker");
	    item.setAttribute("primaryIdentifier", primaryIdentifier);
	    item.setReference("organism", organismRefId);
            markers.put(primaryIdentifier, item);
            //setSynonym(item.getIdentifier(), "identifier", primaryIdentifier);
            //setSynonym(primaryIdentifier, "accession", primaryIdentifier);
	}
	return item;
    }


    private Item getMarkerRelationship(String primaryIdentifier)
        throws SAXException {
        Item item = mrels.get(primaryIdentifier);
        if (item == null) {
            item = createItem("MarkerRelationship");
            item.setAttribute("primaryIdentifier", primaryIdentifier);
            item.setReference("organism", organismRefId);
            mrels.put(primaryIdentifier, item);
        }
        return item;
    }
    
    private void setSynonym(String subjectRefId, String type, String value)
	throws SAXException {
	String key = subjectRefId + type + value;
	if (!synonyms.contains(key)) {
	    Item synonym = createItem("Synonym");
	    synonym.setAttribute("type", type);
	    synonym.setAttribute("value", value);
            synonym.setReference("subject", subjectRefId);
            synonyms.add(key);
            try {
                store(synonym);
            } catch (ObjectStoreException e) {
                throw new SAXException(e);
	    }
	}
    }
}

